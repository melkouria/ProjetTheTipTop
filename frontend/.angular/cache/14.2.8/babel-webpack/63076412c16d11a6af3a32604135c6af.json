{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { EventEmitter, Input, ViewChildren, Output, Component, ElementRef, Renderer2, HostListener, Directive, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"el\"];\n\nfunction PieChartComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"path\", 4, 5);\n    ɵngcc0.ɵɵlistener(\"click\", function PieChartComponent__svg_path_2_Template__svg_path_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6);\n      const item_r2 = restoredCtx.$implicit;\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r5.getItemClicked(item_r2));\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵpropertyInterpolate(\"tooltip\", item_r2.name);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"background\": a0\n  };\n};\n\nfunction PieChartComponent_div_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵelement(1, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(2, \"span\", 10);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"span\", 11);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const item_r8 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(3, _c1, item_r8.color));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(item_r8.name);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(item_r8.value);\n  }\n}\n\nfunction PieChartComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6)(1, \"h4\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, PieChartComponent_div_3_div_3_Template, 6, 5, \"div\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.chartOptions.legendTitle + \" : \" + ctx_r1.totalSum);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.legendData);\n  }\n}\n\nconst _c2 = function (a0, a1) {\n  return {\n    \"height\": a0,\n    \"width\": a1\n  };\n};\n\nfunction BarChartComponent__svg_line_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"line\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function BarChartComponent__svg_line_4_Template__svg_line_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4);\n      const line_r2 = restoredCtx.$implicit;\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r3.getItemClicked(line_r2));\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const line_r2 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵpropertyInterpolate(\"tooltip\", line_r2.name);\n    ɵngcc0.ɵɵattribute(\"x1\", line_r2.x1)(\"y1\", line_r2.y1)(\"x2\", line_r2.x2)(\"y2\", line_r2.y2)(\"stroke\", line_r2.color)(\"stroke-linecap\", ctx_r0.barLineType)(\"title\", line_r2.name);\n  }\n}\n\nfunction BarChartComponent_div_5_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵelement(1, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(2, \"span\", 10);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"span\", 11);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(3, _c1, item_r6.color));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(item_r6.name);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(item_r6.value);\n  }\n}\n\nfunction BarChartComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6)(1, \"h4\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, BarChartComponent_div_5_div_3_Template, 6, 5, \"div\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.chartOptions.legendTitle + \" : \" + ctx_r1.totalSum);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.chartData);\n  }\n}\n\nfunction DonutChartComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"path\", 4, 5);\n    ɵngcc0.ɵɵlistener(\"click\", function DonutChartComponent__svg_path_2_Template__svg_path_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6);\n      const item_r2 = restoredCtx.$implicit;\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r5.getItemClicked(item_r2));\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵpropertyInterpolate(\"tooltip\", item_r2.name);\n    ɵngcc0.ɵɵattribute(\"stroke-width\", ctx_r0.view.donutSize);\n  }\n}\n\nfunction DonutChartComponent_div_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵelement(1, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(2, \"span\", 10);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"span\", 11);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const item_r8 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(3, _c1, item_r8.color));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(item_r8.name);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(item_r8.value);\n  }\n}\n\nfunction DonutChartComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6)(1, \"h4\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, DonutChartComponent_div_3_div_3_Template, 6, 5, \"div\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.chartOptions.legendTitle + \" : \" + ctx_r1.totalSum);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.legendData);\n  }\n}\n\nlet PieChartComponent = /*#__PURE__*/(() => {\n  let PieChartComponent = class PieChartComponent {\n    constructor() {\n      this.selectedItem = new EventEmitter();\n      this.chartOptions = {\n        showLegend: true,\n        legendTitle: 'Total'\n      };\n      this.view = {\n        height: 200,\n        width: 200,\n        radius: 80\n      };\n      this.chartView = [];\n      this.totalSum = 0;\n      this.processedData = [];\n      this.legendData = [];\n    }\n\n    ngOnInit() {\n      this.chartView.push(this.view.height + 'px');\n      this.chartView.push(this.view.width + 'px');\n\n      if (this.chartData) {\n        // Get total number of records\n        this.totalSum = this.chartData.reduce(function (a, b) {\n          return a + b.value;\n        }, 0); //generate Data for piechart\n\n        let prevAngle = 0;\n        this.chartData.map((x, index) => {\n          let legend = {\n            name: x.name,\n            value: x.value,\n            color: x.color\n          };\n          this.legendData.push(legend);\n          let percentage = this.getPercentage(x.value, this.totalSum);\n\n          if (percentage > 0) {\n            let circlePercentage = percentage / 10 * 36;\n            let pieData = {\n              color: x.color,\n              a1: prevAngle,\n              a2: prevAngle + circlePercentage,\n              name: x.name\n            };\n            prevAngle = prevAngle + circlePercentage;\n            this.processedData.push(pieData);\n          }\n        });\n      }\n    }\n\n    ngAfterViewInit() {\n      // create svg \n      if (this.processedData.length > 0) {\n        this.span.map((item, index) => {\n          this.processedData[index].a2 = this.processedData[index].a2 >= 360 ? 359.9 : this.processedData[index].a2;\n          item.nativeElement.setAttribute('d', this.describeArc(this.view.height / 2, this.view.height / 2, this.view.radius, this.processedData[index].a1, this.processedData[index].a2));\n          item.nativeElement.setAttribute('fill', this.processedData[index].color);\n        });\n      }\n    }\n\n    polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n      let angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n      return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n      };\n    }\n\n    describeArc(x, y, radius, startAngle, endAngle) {\n      let start = this.polarToCartesian(x, y, radius, endAngle);\n      let end = this.polarToCartesian(x, y, radius, startAngle);\n      let arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n      let d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, arcSweep, 0, end.x, end.y, \"L\", x, y, \"L\", start.x, start.y].join(\" \");\n      return d;\n    }\n\n    getPercentage(partialValue, totalValue) {\n      return 100 * partialValue / totalValue;\n    }\n\n    getItemClicked(item) {\n      let selected = {\n        name: item.name,\n        value: item.value\n      };\n      this.selectedItem.emit(selected);\n    }\n\n  };\n\n  PieChartComponent.ɵfac = function PieChartComponent_Factory(t) {\n    return new (t || PieChartComponent)();\n  };\n\n  PieChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PieChartComponent,\n    selectors: [[\"ngx-pie-chart\"]],\n    viewQuery: function PieChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.span = _t);\n      }\n    },\n    inputs: {\n      chartOptions: \"chartOptions\",\n      view: \"view\",\n      chartData: \"chartData\"\n    },\n    outputs: {\n      selectedItem: \"selectedItem\"\n    },\n    decls: 4,\n    vars: 6,\n    consts: [[1, \"chart-view\", \"ngx-pie\"], [1, \"chart-wrapper\", 3, \"ngStyle\"], [\"class\", \"pie-chart-path\", \"chartTooltip\", \"\", 3, \"tooltip\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"legend\", 4, \"ngIf\"], [\"chartTooltip\", \"\", 1, \"pie-chart-path\", 3, \"tooltip\", \"click\"], [\"el\", \"\"], [1, \"legend\"], [\"class\", \"legend-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"legend-item\"], [1, \"legend-item-colour\", 3, \"ngStyle\"], [1, \"legend-item-name\"], [1, \"legend-item-value\"]],\n    template: function PieChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"svg\", 1);\n        ɵngcc0.ɵɵtemplate(2, PieChartComponent__svg_path_2_Template, 2, 1, \"path\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, PieChartComponent_div_3_Template, 4, 2, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(3, _c2, ctx.chartView[0], ctx.chartView[1]));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.processedData);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.chartOptions.showLegend);\n      }\n    },\n    dependencies: function () {\n      return [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgStyle, TooltipDirective];\n    },\n    styles: [\"path.pie-chart-path[_ngcontent-%COMP%]:hover{cursor:pointer}\"]\n  });\n\n  __decorate([Input()], PieChartComponent.prototype, \"chartData\", void 0);\n\n  __decorate([ViewChildren('el')], PieChartComponent.prototype, \"span\", void 0);\n\n  __decorate([Output()], PieChartComponent.prototype, \"selectedItem\", void 0);\n\n  __decorate([Input()], PieChartComponent.prototype, \"chartOptions\", void 0);\n\n  __decorate([Input()], PieChartComponent.prototype, \"view\", void 0);\n\n  return PieChartComponent;\n})();\nlet BarChartComponent = /*#__PURE__*/(() => {\n  let BarChartComponent = class BarChartComponent {\n    constructor() {\n      this.selectedItem = new EventEmitter();\n      this.chartData = [];\n      this.chartOptions = {\n        roundedCorners: false,\n        isHorizontal: false,\n        showLegend: true,\n        legendTitle: 'Total'\n      };\n      this.view = {\n        height: 200,\n        width: 200\n      };\n      this.lines = [];\n      this.totalSum = 0;\n      this.isHorizontal = true;\n      this.barLineType = 'round';\n      this.chartView = [];\n      this.scale = 100;\n    }\n\n    ngOnInit() {\n      this.chartView.push(this.view.height + 'px');\n      this.chartView.push(this.view.width + 'px');\n      this.barLineType = this.chartOptions['roundedCorners'] ? 'round' : 'butt';\n      this.isHorizontal = this.chartOptions['isHorizontal'] ? true : false;\n      this.scale = this.isHorizontal ? this.view.width : this.view.height;\n      this.getTotalSum(this.chartData);\n      let value = Math.max.apply(Math, this.chartData.map(function (o) {\n        return o.value;\n      }));\n\n      if (value > this.scale) {\n        let normalizedValue = value / this.scale;\n        this.chartData.map((y, index) => {\n          this.chartData[index]['normalized'] = Number(y.value) / normalizedValue;\n        });\n      } else {\n        let normalizedValue = this.scale / value;\n        this.chartData.map((y, index) => {\n          this.chartData[index]['normalized'] = Number(y.value) * normalizedValue;\n        });\n      }\n\n      this.lines = this.isHorizontal ? this.calculateHorizontalBarLines(this.chartData) : this.calculateVerticalBarLines(this.chartData);\n    }\n\n    ngAfterViewInit() {}\n\n    getItemClicked(line) {\n      let selectedbar = {\n        name: line.name,\n        value: line.value\n      };\n      this.selectedItem.emit(JSON.stringify(selectedbar));\n    }\n\n    calculateHorizontalBarLines(graphData) {\n      let barLines = [];\n      graphData.map((x, index) => {\n        let background = {\n          x1: 10,\n          y1: index * 20 + 20,\n          y2: index * 20 + 20,\n          x2: this.view.width,\n          color: '#EBEBEB',\n          name: x.name,\n          value: x.value\n        };\n        barLines.push(background);\n\n        if (x.value > 0) {\n          let line = {\n            x1: 10,\n            y1: index * 20 + 20,\n            y2: index * 20 + 20,\n            x2: x.normalized < 10 ? this.barLineType == 'butt' ? 11 : 10 : x.normalized,\n            color: x.color,\n            name: x.name,\n            value: x.value\n          };\n          barLines.push(line);\n        }\n      });\n      return barLines;\n    }\n\n    calculateVerticalBarLines(graphData) {\n      let barLines = [];\n      graphData.map((x, index) => {\n        let background = {\n          x1: index * 20 + 20,\n          y1: 10,\n          x2: index * 20 + 20,\n          y2: this.scale,\n          color: '#EBEBEB',\n          name: x.name,\n          value: x.value\n        };\n        barLines.push(background);\n\n        if (x.value > 0) {\n          let line = {\n            x1: index * 20 + 20,\n            y1: this.scale + 10 - x.normalized > this.scale ? this.barLineType == 'butt' ? this.scale - 1 : this.scale : this.scale + 10 - x.normalized,\n            x2: index * 20 + 20,\n            y2: this.scale,\n            color: x.color,\n            name: x.name,\n            value: x.value\n          };\n          barLines.push(line);\n        }\n      });\n      console.log(barLines);\n      return barLines;\n    }\n\n    getTotalSum(chartData) {\n      // Get total number of records\n      this.totalSum = chartData.reduce(function (a, b) {\n        return a + parseInt(b.value);\n      }, 0);\n    }\n\n  };\n\n  BarChartComponent.ɵfac = function BarChartComponent_Factory(t) {\n    return new (t || BarChartComponent)();\n  };\n\n  BarChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarChartComponent,\n    selectors: [[\"ngx-bar-chart\"]],\n    inputs: {\n      chartData: \"chartData\",\n      chartOptions: \"chartOptions\",\n      view: \"view\"\n    },\n    outputs: {\n      selectedItem: \"selectedItem\"\n    },\n    decls: 6,\n    vars: 7,\n    consts: [[1, \"chart-view\", \"ngx-bar\"], [1, \"chart-wrapper\", 3, \"ngStyle\"], [\"id\", \"lines\"], [\"stroke-width\", \"10\", \"class\", \"line\", \"chartTooltip\", \"\", 3, \"tooltip\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"legend\", 4, \"ngIf\"], [\"stroke-width\", \"10\", \"chartTooltip\", \"\", 1, \"line\", 3, \"tooltip\", \"click\"], [1, \"legend\"], [\"class\", \"legend-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"legend-item\"], [1, \"legend-item-colour\", 3, \"ngStyle\"], [1, \"legend-item-name\"], [1, \"legend-item-value\"]],\n    template: function BarChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(2, \"svg\", 2)(3, \"g\");\n        ɵngcc0.ɵɵtemplate(4, BarChartComponent__svg_line_4_Template, 1, 8, \"line\", 3);\n        ɵngcc0.ɵɵelementEnd()()();\n        ɵngcc0.ɵɵtemplate(5, BarChartComponent_div_5_Template, 4, 2, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx.chartView[0], ctx.chartView[1]));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"viewBox\", \"0 0 \" + (ctx.isHorizontal ? ctx.scale + 40 : ctx.lines[ctx.lines.length - 1].x1 + 20) + \" \" + (ctx.isHorizontal ? ctx.lines[ctx.lines.length - 1].y2 + 20 : ctx.scale + 20));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.lines);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.chartOptions.showLegend);\n      }\n    },\n    dependencies: function () {\n      return [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgStyle, TooltipDirective];\n    },\n    styles: [\".line[_ngcontent-%COMP%]{cursor:pointer}\"]\n  });\n\n  __decorate([Output()], BarChartComponent.prototype, \"selectedItem\", void 0);\n\n  __decorate([Input()], BarChartComponent.prototype, \"chartData\", void 0);\n\n  __decorate([Input()], BarChartComponent.prototype, \"chartOptions\", void 0);\n\n  __decorate([Input()], BarChartComponent.prototype, \"view\", void 0);\n\n  return BarChartComponent;\n})();\nlet DonutChartComponent = /*#__PURE__*/(() => {\n  let DonutChartComponent = class DonutChartComponent {\n    constructor() {\n      this.selectedItem = new EventEmitter();\n      this.chartOptions = {\n        showLegend: true,\n        legendTitle: 'Total'\n      };\n      this.view = {\n        height: 200,\n        width: 200,\n        radius: 80,\n        donutSize: 20\n      };\n      this.totalSum = 0;\n      this.processedData = [];\n      this.legendData = [];\n      this.chartView = [];\n    }\n\n    ngOnInit() {\n      if (this.chartData) {\n        this.view['donutSize'] = this.view['donutSize'] ? this.view['donutSize'] : 20;\n        this.chartView.push(this.view.height + 'px');\n        this.chartView.push(this.view.width + 'px'); // Get total number of records\n\n        this.totalSum = this.chartData.reduce(function (a, b) {\n          return a + b.value;\n        }, 0); //generate Data for list\n\n        let prevAngle = 0;\n        this.chartData.map((x, index) => {\n          let legend = {\n            name: x.name,\n            value: x.value,\n            color: x.color\n          };\n          this.legendData.push(legend);\n          let percentage = this.getPercentage(x.value, this.totalSum);\n\n          if (percentage > 0) {\n            let circlePercentage = percentage / 10 * 36;\n            let pieData = {\n              color: x.color,\n              a1: prevAngle,\n              a2: prevAngle + circlePercentage,\n              name: x.name\n            };\n            prevAngle = prevAngle + circlePercentage;\n            this.processedData.push(pieData);\n          }\n        });\n      }\n    }\n\n    getPercentage(partialValue, totalValue) {\n      return 100 * partialValue / totalValue;\n    }\n\n    ngAfterViewInit() {\n      //create svg\n      if (this.processedData.length > 0) {\n        this.span.map((item, index) => {\n          item.nativeElement.setAttribute('d', this.describeArc(this.view.height / 2, this.view.width / 2, this.view.radius, this.processedData[index].a1, this.processedData[index].a2 == 360 ? 359.99 : this.processedData[index].a2));\n          item.nativeElement.setAttribute('stroke', this.processedData[index].color);\n        });\n      }\n    }\n\n    polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n      let angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n      return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n      };\n    }\n\n    describeArc(x, y, radius, startAngle, endAngle) {\n      let start = this.polarToCartesian(x, y, radius, endAngle);\n      let end = this.polarToCartesian(x, y, radius, startAngle);\n      let largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n      let d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(\" \");\n      return d;\n    }\n\n    getItemClicked(item) {\n      let selected = {\n        name: item.name,\n        value: item.value\n      };\n      this.selectedItem.emit(selected);\n    }\n\n    show(status) {}\n\n  };\n\n  DonutChartComponent.ɵfac = function DonutChartComponent_Factory(t) {\n    return new (t || DonutChartComponent)();\n  };\n\n  DonutChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DonutChartComponent,\n    selectors: [[\"ngx-donut-chart\"]],\n    viewQuery: function DonutChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.span = _t);\n      }\n    },\n    inputs: {\n      chartOptions: \"chartOptions\",\n      view: \"view\",\n      chartData: \"chartData\"\n    },\n    outputs: {\n      selectedItem: \"selectedItem\"\n    },\n    decls: 4,\n    vars: 6,\n    consts: [[1, \"chart-view\", \"ngx-donut\"], [1, \"chart-wrapper\", 3, \"ngStyle\"], [\"width\", \"100%\", \"height\", \"100%\", \"fill\", \"none\", \"chartTooltip\", \"\", 3, \"tooltip\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"legend\", 4, \"ngIf\"], [\"width\", \"100%\", \"height\", \"100%\", \"fill\", \"none\", \"chartTooltip\", \"\", 3, \"tooltip\", \"click\"], [\"el\", \"\"], [1, \"legend\"], [\"class\", \"legend-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"legend-item\"], [1, \"legend-item-colour\", 3, \"ngStyle\"], [1, \"legend-item-name\"], [1, \"legend-item-value\"]],\n    template: function DonutChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(1, \"svg\", 1);\n        ɵngcc0.ɵɵtemplate(2, DonutChartComponent__svg_path_2_Template, 2, 2, \"path\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, DonutChartComponent_div_3_Template, 4, 2, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(3, _c2, ctx.chartView[0], ctx.chartView[1]));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.processedData);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.chartOptions.showLegend);\n      }\n    },\n    dependencies: function () {\n      return [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgStyle, TooltipDirective];\n    },\n    styles: [\"path[_ngcontent-%COMP%]:hover{cursor:pointer}\"]\n  });\n\n  __decorate([Input()], DonutChartComponent.prototype, \"chartData\", void 0);\n\n  __decorate([Output()], DonutChartComponent.prototype, \"selectedItem\", void 0);\n\n  __decorate([ViewChildren('el')], DonutChartComponent.prototype, \"span\", void 0);\n\n  __decorate([Input()], DonutChartComponent.prototype, \"chartOptions\", void 0);\n\n  __decorate([Input()], DonutChartComponent.prototype, \"view\", void 0);\n\n  return DonutChartComponent;\n})();\nlet TooltipDirective = /*#__PURE__*/(() => {\n  let TooltipDirective = class TooltipDirective {\n    constructor(el, renderer) {\n      this.el = el;\n      this.renderer = renderer;\n      this.placement = 'top';\n      this.offset = 10;\n    }\n\n    onMouseEnter() {\n      if (!this.tooltip) {\n        this.show();\n      }\n    }\n\n    onMouseLeave() {\n      if (this.tooltip) {\n        this.hide();\n      }\n    }\n\n    show() {\n      this.create();\n      this.setPosition();\n      this.renderer.addClass(this.tooltip, 'ngx-chart-tooltip-show');\n    }\n\n    hide() {\n      this.renderer.removeClass(this.tooltip, 'ngx-chart-tooltip-show');\n      this.renderer.removeChild(document.body, this.tooltip);\n      this.tooltip = null;\n    }\n\n    create() {\n      this.tooltip = this.renderer.createElement('span');\n      this.renderer.appendChild(this.tooltip, this.renderer.createText(this.tooltipTitle) // textNode\n      );\n      this.renderer.appendChild(document.body, this.tooltip);\n      this.renderer.addClass(this.tooltip, 'ngx-chart-tooltip');\n      this.renderer.addClass(this.tooltip, `ngx-chart-tooltip-${this.placement}`);\n    }\n\n    setPosition() {\n      const hostPos = this.el.nativeElement.getBoundingClientRect();\n      const tooltipPos = this.tooltip.getBoundingClientRect();\n      const scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      let top, left;\n\n      if (this.placement === 'bottom') {\n        top = hostPos.bottom + this.offset;\n        left = hostPos.left + (hostPos.width - tooltipPos.width) / 2;\n      } else if (this.placement === 'left') {\n        top = hostPos.top + (hostPos.height - tooltipPos.height) / 2;\n        left = hostPos.left - tooltipPos.width - this.offset;\n      } else if (this.placement === 'right') {\n        top = hostPos.top + (hostPos.height - tooltipPos.height) / 2;\n        left = hostPos.right + this.offset;\n      } else {\n        // top\n        top = hostPos.top - tooltipPos.height - this.offset;\n        left = hostPos.left + (hostPos.width - tooltipPos.width) / 2;\n      }\n\n      this.renderer.setStyle(this.tooltip, 'top', `${top + scrollPos}px`);\n      this.renderer.setStyle(this.tooltip, 'left', `${left}px`);\n    }\n\n  };\n\n  TooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n    return new (t || TooltipDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  TooltipDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TooltipDirective,\n    selectors: [[\"\", \"chartTooltip\", \"\"]],\n    hostBindings: function TooltipDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function TooltipDirective_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function TooltipDirective_mouseleave_HostBindingHandler() {\n          return ctx.onMouseLeave();\n        });\n      }\n    },\n    inputs: {\n      placement: \"placement\",\n      tooltipTitle: [\"tooltip\", \"tooltipTitle\"]\n    }\n  });\n\n  __decorate([Input('tooltip')], TooltipDirective.prototype, \"tooltipTitle\", void 0);\n\n  __decorate([Input()], TooltipDirective.prototype, \"placement\", void 0);\n\n  __decorate([HostListener('mouseenter')], TooltipDirective.prototype, \"onMouseEnter\", null);\n\n  __decorate([HostListener('mouseleave')], TooltipDirective.prototype, \"onMouseLeave\", null);\n\n  return TooltipDirective;\n})();\nlet NgxChartModule = /*#__PURE__*/(() => {\n  let NgxChartModule = class NgxChartModule {};\n\n  NgxChartModule.ɵfac = function NgxChartModule_Factory(t) {\n    return new (t || NgxChartModule)();\n  };\n\n  NgxChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxChartModule\n  });\n  NgxChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return NgxChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxChartModule, {\n    declarations: function () {\n      return [PieChartComponent, BarChartComponent, DonutChartComponent, TooltipDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [PieChartComponent, BarChartComponent, DonutChartComponent];\n    }\n  });\n})();\n/*\r\n * Public API Surface of ngx-chart\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BarChartComponent, DonutChartComponent, NgxChartModule, PieChartComponent, TooltipDirective as ɵa }; //# sourceMappingURL=ngx-chart.js.map","map":null,"metadata":{},"sourceType":"module"}